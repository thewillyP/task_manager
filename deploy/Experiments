pipeline {
    agent any

    parameters {
        string(name: 'build_content', defaultValue: '', description: 'Build archetype content (JSON)')
        string(name: 'task_content', defaultValue: '', description: 'Task archetype content (JSON)')
        string(name: 'task_instance_id', defaultValue: '', description: 'Task instance ID')
    }

    environment {
        SSH_USER = 'wlp9800'
        LOG_DIR = "/vast/${SSH_USER}/logs"
        SIF_DIR = "/scratch/${SSH_USER}/images"
        TASK_MANAGER_PORT = '40378'
        MAX_JOBS = '1980'
        SCRIPT_BASE_URL = 'https://raw.githubusercontent.com/thewillyP/task_manager/e914e64efa4bedae9e3fb18f2c3432cae33446c5/deploy/experiments'
    }

    stages {
        stage('Parse Parameters') {
            steps {
                script {
                    def buildContent = readJSON text: params.build_content
                    def taskContent = readJSON text: params.task_content

                    env.IMAGE = buildContent.image
                    env.DOCKER_URL = buildContent.docker_url
                    env.BUILD_TIME = buildContent.build_time
                    env.BUILD_MEMORY = buildContent.build_memory
                    env.BUILD_CPUS = buildContent.build_cpus
                    env.OVERLAY_SIZE = buildContent.overlay_size
                    env.FORCE_BUILD = buildContent.force_build.toString()
                    env.SWEEP_YML_URL = taskContent.sweep_yml_url
                    env.BIND_MAPPINGS = taskContent.bind_mappings.join(',')
                    env.DEPLOY_TIME = taskContent.deploy_time
                    env.DEPLOY_CPUS = taskContent.deploy_cpus
                    env.DEPLOY_GPUS = taskContent.deploy_gpus
                    env.DEPLOY_MEMORY = taskContent.deploy_memory
                    env.SIF_PATH = "${SIF_DIR}/${IMAGE}.sif"
                }
            }
        }

        stage('Get Executor Hostname') {
            steps {
                script {
                    env.EXEC_HOST = sh(script: 'hostname', returnStdout: true).trim()
                    echo "Running on host: ${env.EXEC_HOST}"
                }
            }
        }

        stage('Check Task Manager') {
            steps {
                script {
                    def taskManagerHost = sh(script: """
                        ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EXEC_HOST} 'curl -s ${SCRIPT_BASE_URL}/check_task_manager.sh | bash -s ${SSH_USER}'
                    """, returnStdout: true).trim()

                    if (taskManagerHost == 'NO_TASK_MANAGER') {
                        error "No task_manager job running. Exiting build."
                    } else {
                        env.TASK_MANAGER_HOST = taskManagerHost
                        echo "Task Manager running on host: ${env.TASK_MANAGER_HOST}"
                    }
                }
            }
        }

        stage('Check Existing Sweep Jobs') {
            steps {
                script {
                    def sweepHost = sh(script: """
                        ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EXEC_HOST} 'curl -s ${SCRIPT_BASE_URL}/check_sweep_jobs.sh | bash -s ${SSH_USER}'
                    """, returnStdout: true).trim()

                    if (sweepHost == 'MISSING_JOBS') {
                        error "Required sweep jobs missing!"
                    }

                    env.SWEEP_HOST = sweepHost
                    echo "Sweep server running on host: ${env.SWEEP_HOST}"
                }
            }
        }

        stage('Check Task Instance Sweep ID') {
            steps {
                withCredentials([
                    string(credentialsId: 'sweep_port', variable: 'SWEEP_PORT')
                ]) {
                    script {
                        def taskInstanceResponse = httpRequest(
                            url: "http://${TASK_MANAGER_HOST}:${TASK_MANAGER_PORT}/api/task_instances/${params.task_instance_id}",
                            httpMode: 'GET'
                        )
                        def taskInstance = readJSON(text: taskInstanceResponse.content)

                        // Normalize sweepId: convert to string, trim whitespace, handle null safely
                        def sweepId = taskInstance.sweep_id?.toString()?.trim()

                        echo "Fetched sweepId: '${sweepId}'"

                        // Check for null, empty, or "null" string explicitly
                        if (!sweepId || sweepId == "null") {
                            echo "No sweep_id found or invalid value, creating new sweep..."
                            def sweepResponse = sh(
                                script: """
                                ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EXEC_HOST} 'curl -s ${SCRIPT_BASE_URL}/create_sweep.sh | bash -s ${SWEEP_YML_URL} ${SWEEP_HOST} ${SWEEP_PORT}'
                                """, returnStdout: true
                            ).trim()

                            echo "Raw sweepResponse: '${sweepResponse}'"

                            sweepId = readJSON(text: sweepResponse).sweep_id
                            echo "Created new sweep instance with ID: ${sweepId}"

                            httpRequest(
                                url: "http://${TASK_MANAGER_HOST}:${TASK_MANAGER_PORT}/api/task_instances/${params.task_instance_id}",
                                httpMode: 'PUT',
                                contentType: 'APPLICATION_JSON',
                                requestBody: "{\"sweep_id\": \"${sweepId}\"}"
                            )
                            echo "Updated task instance ${params.task_instance_id} with sweep_id: ${sweepId}"
                        } else {
                            echo "Using existing sweep_id: ${sweepId}"
                        }

                        // Set environment variable reliably
                        env.SWEEP_ID = sweepId
                    }
                }
            }
        }

        stage('Check Job and Sweep Slots') {
            steps {
                withCredentials([
                    string(credentialsId: 'sweep_port', variable: 'SWEEP_PORT')
                ]) {
                    script {
                        def slotInfo = readJSON text: sh(script: """
                            ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EXEC_HOST} 'curl -s ${SCRIPT_BASE_URL}/check_slots.sh | bash -s ${SSH_USER} ${MAX_JOBS} ${SWEEP_HOST} ${SWEEP_PORT} ${SWEEP_ID} ${TASK_MANAGER_HOST} ${TASK_MANAGER_PORT} ${params.task_instance_id}'
                        """, returnStdout: true).trim()

                        def totalJobs = slotInfo.total_jobs.toInteger()
                        def jobsAvailable = slotInfo.jobs_available.toInteger()
                        def sweepCount = slotInfo.sweep_count.toInteger()

                        echo "Total jobs running/pending: ${totalJobs}"
                        echo "Jobs available: ${jobsAvailable}"
                        echo "Remaining sweep configurations: ${sweepCount}"

                        if (jobsAvailable <= 0) {
                            error "No job slots available. Task ${params.task_instance_id} requeued."
                        }

                        if (sweepCount == 0) {
                            echo "No sweep configurations remaining. Task ${params.task_instance_id} is complete."
                            return
                        }

                        env.JOBS_TO_SUBMIT = Math.min(jobsAvailable, sweepCount).toString()
                        echo "Jobs to submit: ${env.JOBS_TO_SUBMIT}"

                        if (sweepCount > jobsAvailable) {
                            echo "More sweep configurations (${sweepCount}) than available job slots (${jobsAvailable}). Submitting ${JOBS_TO_SUBMIT} jobs and requeuing task ${params.task_instance_id}."
                        }
                    }
                }
            }
        }

        stage('Build Image') {
            when {
                expression { env.JOBS_TO_SUBMIT.toInteger() > 0 }
            }
            steps {
                script {
                    def sifExists = sh(
                        script: """
                        ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EXEC_HOST} 'curl -s ${SCRIPT_BASE_URL}/build_image.sh | bash -s check ${SIF_PATH}'
                        """, returnStdout: true
                    ).trim()

                    if (sifExists == 'EXISTS' && env.FORCE_BUILD != 'true') {
                        echo "SIF file ${SIF_PATH} already exists. Skipping build."
                    } else {
                        env.BUILD_JOB_ID = sh(
                            script: """
                            ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EXEC_HOST} 'curl -s ${SCRIPT_BASE_URL}/build_image.sh | bash -s build ${SIF_DIR} ${SIF_PATH} ${DOCKER_URL} ${OVERLAY_SIZE} ${IMAGE} ${BUILD_CPUS} ${BUILD_MEMORY} ${BUILD_TIME} ${LOG_DIR}'
                            """, returnStdout: true
                        ).trim().replaceAll(/.*Submitted batch job (\d+).*/, '$1')

                        echo "Submitted build job with ID: ${env.BUILD_JOB_ID}"
                    }
                }
            }
        }

        stage('Deploy Jobs') {
            when {
                expression { env.JOBS_TO_SUBMIT.toInteger() > 0 }
            }
            steps {
                withCredentials([
                    string(credentialsId: 'wandb_api_key', variable: 'WANDB_API_KEY'),
                    string(credentialsId: 'sweep_port', variable: 'SWEEP_PORT')
                ]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EXEC_HOST} 'curl -s ${SCRIPT_BASE_URL}/deploy_jobs.sh | bash -s ${IMAGE} ${JOBS_TO_SUBMIT} ${DEPLOY_CPUS} ${DEPLOY_GPUS} ${DEPLOY_MEMORY} ${DEPLOY_TIME} ${LOG_DIR} ${SIF_PATH} ${SWEEP_ID} "${params.build_content}" "${params.task_content}" ${WANDB_API_KEY} ${SWEEP_HOST} ${SWEEP_PORT} "${BIND_MAPPINGS}" ${BUILD_JOB_ID}'
                    """
                }
            }
        }
    }
}