pipeline {
    agent any

    parameters {
        booleanParam(name: 'FORCE_REBUILD', defaultValue: false, description: 'Force rebuild of the Singularity image')
    }

    environment {
        SSH_HOST = 'greene.hpc.nyu.edu'
        SSH_USER = 'wlp9800'
        SCRATCH_DIR = "/scratch/wlp9800"
        LOG_DIR = "/vast/wlp9800/logs"
        SIF_PATH = "/scratch/wlp9800/images/task_manager.sif"

    }

    stages {
        stage('Check SLURM availability on executor') {
            steps {
                sh '''
                echo "Checking srun and sbatch availability on this node..."
                
                echo -n "srun: "
                command -v srun || echo "NOT FOUND"

                echo -n "sbatch: "
                command -v sbatch || echo "NOT FOUND"

                echo "Trying: srun --version"
                srun --version || echo "srun failed"

                echo "Trying: sbatch --version"
                sbatch --version || echo "sbatch failed"
                '''
            }
        }
        stage('Test SSH connection') {
            steps {
                sh """
                echo "Testing SSH connectivity to ${SSH_HOST}..."
                ssh -o BatchMode=yes -o StrictHostKeyChecking=no ${SSH_HOST} 'hostname && whoami'
                echo "SSH connection succeeded."
                """
            }
        }
        stage('Cancel existing task_manager jobs') {
            steps {
                sh """
                ssh ${SSH_HOST} '
                    active_jobs=\$(squeue -u ${SSH_USER} -n task_manager -h -o "%i")
                    if [ -n "\$active_jobs" ]; then
                        echo "Found running task_manager jobs: \$active_jobs"
                        for jobid in \$active_jobs; do
                            echo "Cancelling job \$jobid"
                            scancel \$jobid
                        done
                    else
                        echo "No active task_manager jobs found."
                    fi
                '
                """
            }
        }
        stage('Build with srun (conditionally)') {
            steps {
                script {
                    def checkCommand = """
                        ssh ${SSH_HOST} '[ -f ${SIF_PATH} ] && echo exists || echo missing'
                    """.trim()

                    def result = sh(script: checkCommand, returnStdout: true).trim()

                    if (params.FORCE_REBUILD || result == "missing") {
                        echo "Building image (reason: ${params.FORCE_REBUILD ? 'forced' : 'not found'})"
                        sh """
                        ssh ${SSH_HOST} '
                            srun --nodes=1 --ntasks=1 --mem=4G --time=00:15:00 \\
                                --job-name=build_task_manager \\
                                bash -c "
                                    mkdir -p ${SCRATCH_DIR}/images ${SCRATCH_DIR}/task_manager
                                    cp -rp /scratch/work/public/overlay-fs-ext3/overlay-5GB-3.2M.ext3.gz ${SCRATCH_DIR}/task_manager.ext3.gz
                                    gunzip -f ${SCRATCH_DIR}/task_manager.ext3.gz
                                    singularity build --force ${SIF_PATH} docker://thewillyp/task_manager:latest
                                "
                        '
                        """
                    } else {
                        echo "Skipping build: ${SIF_PATH} already exists and FORCE_REBUILD=false"
                    }
                }
            }
        }

        stage('Run via sbatch (Using Overlay)') {
            steps {
                sh """
                ssh ${SSH_HOST} 'sbatch <<EOF
#!/bin/bash
#SBATCH --job-name=task_manager
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --mem=4G
#SBATCH --time=06:00:00
#SBATCH --gres=gpu:0
#SBATCH --cpus-per-task=2
#SBATCH --output=${LOG_DIR}/run-%j.out
#SBATCH --error=${LOG_DIR}/run-%j.err


singularity run --containall --cleanenv --no-home \\
  --overlay ${SCRATCH_DIR}/task_manager.ext3:rw \\
  --bind /home/${SSH_USER}/.ssh \\
  --bind ${SCRATCH_DIR}/task_manager:/app \\
  ${SCRATCH_DIR}/images/task_manager.sif
EOF'
                """
            }
        }
    }
}
